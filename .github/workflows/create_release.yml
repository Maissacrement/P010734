name: create release
'on':
  push:
    paths-ignore: '**/README.md'
jobs:
  release-project:
    name: Release different versions of Text file
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install zipfile36 openpecha PyYAML rdflib requests

        '
    - name: Create zip file for plain and pages
      run: |
        import os 
        import re
        import yaml
        import requests
        from zipfile36 import ZipFile
        from os.path import basename
        from pathlib import Path
        from openpecha.serializers import HFMLSerializer
        from rdflib import Graph
        from rdflib.namespace import RDF, RDFS, SKOS, OWL, Namespace, NamespaceManager, XSD
        BDR = Namespace("http://purl.bdrc.io/resource/")
        BDO = Namespace("http://purl.bdrc.io/ontology/core/")
        def write_text(content, new_path, vol_num, volume_title, _type, single, pecha_id):
            if single != True:
                if volume_title == None:
                    out_fn = Path(f"{new_path}/v{vol_num}_{_type}.txt")
                    out_fn.write_text(content)
                else:
                    out_fn = Path(f"{new_path}/v{vol_num}_{volume_title}_{_type}.txt")
                    out_fn.write_text(content)
            else:
                if volume_title == None:
                    out_fn = Path(f"{new_path}/{pecha_id}_{_type}.txt")
                    out_fn.write_text(content)
                else:
                    out_fn = Path(f"{new_path}/{pecha_id}_{volume_title}_{_type}.txt")
                    out_fn.write_text(content)
        def create_zip(base_path, name):
            with ZipFile(name, 'w') as zipObj:
                for folderName, subfolders, filenames in os.walk(base_path):
                    for filename in filenames:
                        filePath = os.path.join(folderName, filename)
                        zipObj.write(filePath, basename(filePath))
        def get_imgnum_and_reference(pagination_content):
            new_pagination = {}
            pagination = {}
            paginations = pagination_content['annotations']
            for num, uuid in enumerate(paginations,1):
                if 'imgnum' in paginations[uuid]:
                    new_pagination[f"{num}"] = { 
                            'imgnum': paginations[uuid]['imgnum'],
                            'reference': paginations[uuid]['reference']
                            }
                    pagination.update(new_pagination)
                    new_pagination = {}
            return pagination
        def get_pagination_info(pagination_path, vol_num):
            pagination_content = Path(f"{pagination_path}/{vol_num}/Pagination.yml").read_text(encoding='utf-8')
            pagination_content = yaml.safe_load(pagination_content)
            pagination_info = get_imgnum_and_reference(pagination_content)
            return pagination_info
        def get_new_line(line, pagination_info):
            new_line = None
            for pg in pagination_info:
                imgnum = pagination_info[pg]['imgnum']
                reference = pagination_info[pg]['reference']
                if re.search(f"{reference}", line):
                    new_line = f" i-{imgnum}"
                    break
            return new_line 
        def get_clean_pages(lines, pagination_info):
            new_line = []
            new_content = ""
            for num, line in enumerate(lines,1):
                if  num % 2 != 0:
                    new_line = re.sub(f"(\[((.\d+\w)|(\d+(a|b)\.\d+)|(\.\d+))\])", "", line )
                    if re.search(r".jpg|.tif", new_line):
                        new_line = get_new_line(new_line, pagination_info)
                        if new_line != None:
                            new_content += new_line
                            new_line = []
                    else:
                        new_content += new_line
                        new_line = []
                else:
                    new_content += "\n"
            return new_content
        def change_file_name_pages(pages, pages_path, meta_info, pagination_path, single, pecha_id):
            _type = "pages"
            for _, vol in enumerate(pages,1):
                vol_num = vol[1:]
                for _, meta in meta_info.items():
                    vol = meta['vol_num']
                    new_vol = f"{vol:03}"
                    if new_vol == vol_num:
                        uid = meta['uid']
                        if 'title' in meta.keys():
                            volume_title = meta['title']
                        else:
                            volume_title = None
                        pagination_info = get_pagination_info(pagination_path, f"v{vol_num}")
                        content = pages[f'v{vol_num}']
                        lines = re.split(f"(\\\n)", content)
                        pages_content = get_clean_pages(lines, pagination_info)
                        pages_content += f"OpenPechaUUID:{uid}"
                        write_text(pages_content, pages_path, vol_num, volume_title, _type, single, pecha_id)
        def get_pages(opf_path):
            serializer = HFMLSerializer(opf_path, layers=["Pagination"])
            serializer.apply_layers()
            results = serializer.get_result()
            return results
        def change_file_name_plain(meta_info, opf_path, new_path, single, pecha_id):
            _type = "plain"
            for file in os.listdir(f"{opf_path}/base"):
                if file.endswith(".txt"):
                    file_path = Path(f"{opf_path}/base/{file}")
                    file_name = file[1:-4]
                    content = Path(f'{file_path}').read_text(encoding='utf-8')
                    for _, meta in meta_info.items():
                        vol = meta['vol_num']
                        new_vol = f"{vol:03}"
                        if new_vol == file_name:
                            uid = meta['uid']
                            vol_num = file_name
                            if 'title' in meta.keys():
                                volume_title = meta['title']
                            else:
                                volume_title = None
                            content += f"OpenPechaUUID:{uid}"
                            write_text(content, new_path, vol_num, volume_title, _type, single, pecha_id)    
                            break
        def get_file_name_info(vol_info, meta_info, nums):
            filename_info = {}
            for num in nums:
                for info_num, meta in meta_info.items():
                    if meta['image_group'] == vol_info[num]["image_group_id"]:
                        if vol_info[num]["title"]:
                            cur_text[num] = { 
                            'vol_num': meta['vol_num'],
                            'uid': meta['uid'],
                            'title': vol_info[num]["title"]
                            }
                            filename_info.update(cur_text)
                            num += 1
                            cur_text = {}
                    else:
                        cur_text[num] = { 
                        'vol_num': meta['vol_num'],
                        'uid': meta['uid'],
                        }
                        filename_info.update(cur_text)
                        num += 1
                        cur_text = {}
                return filename_info
        def get_img_grp_id(URI):    
            return URI.split("/")[-1]
        def get_vol_img_grp_id_list(g, work_id):
            vol_img_grp_ids = []
            volumes = g.objects(BDR[work_id], BDO["instanceHasVolume"])
            for volume in volumes:
                vol_img_grp_id = get_img_grp_id(str(volume))
                vol_img_grp_ids.append(vol_img_grp_id)
            vol_img_grp_ids.sort()
            return vol_img_grp_ids
        def parse_volume_info(meta_ttl, work_id):
            g = Graph()
            try:
                g.parse(data=meta_ttl, format="ttl")
            except:
                print(f"{work_id}.ttl Contains bad syntax")
                return None, None
            vol_img_grp_ids = get_vol_img_grp_id_list(g, work_id)
            vol_info = {}
            num = 1
            for vol_img_grp_id in vol_img_grp_ids:
                title = g.value(BDR[vol_img_grp_id], RDFS.comment)
                if title:
                    title = title.value
                    vol_info[num] = {
                        "image_group_id": vol_img_grp_id,
                        "title": title,
                    }
                    num +=1
            if num == 1:
                return None, None
            return vol_info, num
        def get_ttl(work_id):
            try:
                ttl = requests.get(f"http://purl.bdrc.io/graph/{work_id}.ttl")
                return ttl.text
            except:
                print(' TTL not Found!!!')
                return None
        def check_num_of_vol(meta_info):
            num = 0
            for _ in meta_info:
                num += 1
                if num > 1:
                    break
            return num
        def get_meta_info(meta_data):
            work_id = meta_data['source_metadata']['id'][4:] 
            volumes = meta_data['source_metadata']['volumes']
            cur_text = {}
            meta_info = {}
            num = 1
            for uid, vol_info in volumes.items():
                vol_num = vol_info['volume_number']
                cur_text[num] = { 
                    'vol_num': vol_num,
                    'uid': uid[:6]
                }
                meta_info.update(cur_text)
                num += 1
                cur_text = {}
            return meta_info, work_id
        if __name__=="__main__":
            pecha_id = Path.cwd().name
            opf_path = Path.cwd().resolve() / f"{pecha_id}.opf"
            meta_content = Path(f'{opf_path}/meta.yml').read_text(encoding='utf-8')
            meta_data = yaml.safe_load(meta_content)
            base_path = Path(f'{opf_path}/base')
            plain_path = Path(f"./output/publication/plains")
            plain_path.mkdir(exist_ok=True, parents=True)
            pages_path = Path(f"./output/publication/pages")
            pages_path.mkdir(exist_ok=True, parents=True)
            meta_info, work_id = get_meta_info(meta_data)
            nums_of_vol = check_num_of_vol(meta_info)
            meta_ttl = get_ttl(work_id)
            if meta_ttl != None:
                vol_info, num  = parse_volume_info(meta_ttl, work_id)
                if num != None:
                    filename_info = get_file_name_info(vol_info, meta_info, num)
                    meta_info = filename_info
            if nums_of_vol == 1:
                single = True
            else:
                single = False
            change_file_name_plain(meta_info, opf_path, plain_path, single, pecha_id) 
            create_zip(plain_path, f"{pecha_id}_plain.zip") 
            pagination_path = Path(f"{opf_path}/layers")
            pages = get_pages(opf_path)
            change_file_name_pages(pages, pages_path, meta_info, pagination_path, single, pecha_id)
            create_zip(pages_path, f"{pecha_id}_pages.zip")
      shell: python
    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: upload plain assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{  secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}_plain.zip
        asset_name: zhong_guo_di_er_li_shi_dang_an_plain_P010734.zip
        asset_content_type: text/zip
    - name: upload pages assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{  secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}_pages.zip
        asset_name: zhong_guo_di_er_li_shi_dang_an_pages_P010734.zip
        asset_content_type: text/zip
